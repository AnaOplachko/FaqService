// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FaqService.ComponentTests.Features.AdminTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Admin_Could_Make_CRUD_And_Search_Operations_With_ArticlesFeature : object, Xunit.IClassFixture<Admin_Could_Make_CRUD_And_Search_Operations_With_ArticlesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Admin could make CRUD and Search operations with articles.feature"
#line hidden
        
        public Admin_Could_Make_CRUD_And_Search_Operations_With_ArticlesFeature(Admin_Could_Make_CRUD_And_Search_Operations_With_ArticlesFeature.FixtureData fixtureData, FaqService_ComponentTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-EN"), "Features/AdminTests", "Admin_could_make_CRUD_and_Search_operations_with_articles", "\tКак администратор\n\tЯ хочу управлять статьями, реализуя CRUD операции и осуществл" +
                    "ять поиск по статьям", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
 #line hidden
#line 5
  testRunner.Given("В базу данных добавлена корневая категория с именем \"First\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
  testRunner.And("В базу данных добавлена корневая категория с именем \"Second\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
  testRunner.And("В базу данных добавлена дочерняя категория с именем \"Third\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
  testRunner.And("В базу данных добавлена дочерняя категория с именем \"Fourth\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Администратор добавляет статью с корректными данными")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "Администратор добавляет статью с корректными данными")]
        public void АдминистраторДобавляетСтатьюСКорректнымиДанными()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор добавляет статью с корректными данными", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 11
 testRunner.When("Администратор добавляет статью с корректными данными", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then("Статья успешно создана", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.When("Администратор добавляет статью с некорректным идентификатором родителя", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("Получено сообщение об ошибке NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Администратор получает сообщение об ошибке если список всех статей пуст")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "Администратор получает сообщение об ошибке если список всех статей пуст")]
        public void АдминистраторПолучаетСообщениеОбОшибкеЕслиСписокВсехСтатейПуст()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор получает сообщение об ошибке если список всех статей пуст", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 17
 testRunner.When("Администратор запрашивает все статьи", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.Then("Получено сообщение об ошибке NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Администратор получает список всех статей")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "Администратор получает список всех статей")]
        public void АдминистраторПолучаетСписокВсехСтатей()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор получает список всех статей", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 21
    testRunner.Given("В базу данных добавлена статья с вопросом \"First\", ответом \"Answer\", позицией \"1\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
 testRunner.And("В базу данных добавлена статья с вопросом \"Second\", ответом \"Answer\", позицией \"2" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("В базу данных добавлена статья с вопросом \"Third\", ответом \"Answer\", позицией \"3\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
    testRunner.When("Администратор запрашивает все статьи", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
    testRunner.Then("Администратор получает все статьи", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Администратор получает статью по идентификатору")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "Администратор получает статью по идентификатору")]
        public void АдминистраторПолучаетСтатьюПоИдентификатору()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор получает статью по идентификатору", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 28
 testRunner.Given("В базу данных добавлена статья с вопросом \"First\", ответом \"Answer\", позицией \"1\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.And("В базу данных добавлена статья с вопросом \"Second\", ответом \"Answer\", позицией \"2" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("В базу данных добавлена статья с вопросом \"Third\", ответом \"Answer\", позицией \"3\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.When("Администратор запрашивает статью по идентификатору", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("Администратор получает статью с верным идентификатором", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.When("Администратор запрашивает статью с некорректным идентификатором", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("Получено сообщение об ошибке NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Администратор удаляет статью по идентификатору")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "Администратор удаляет статью по идентификатору")]
        public void АдминистраторУдаляетСтатьюПоИдентификатору()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор удаляет статью по идентификатору", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 37
 testRunner.Given("В базу данных добавлена статья с вопросом \"First\", ответом \"Answer\", позицией \"1\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.And("В базу данных добавлена статья с вопросом \"Second\", ответом \"Answer\", позицией \"2" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("В базу данных добавлена статья с вопросом \"Third\", ответом \"Answer\", позицией \"3\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.When("Администратор удаляет статью по идентификатору", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.Then("Статья успешно удалена", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.When("Администратор удаляет статью с некорректным идентификатором", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("Получено сообщение об ошибке NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Администратор изменяет статью")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "Администратор изменяет статью")]
        public void АдминистраторИзменяетСтатью()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор изменяет статью", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 46
 testRunner.Given("В базу данных добавлена статья с вопросом \"First\", ответом \"Answer\", позицией \"1\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
 testRunner.And("В базу данных добавлена статья с вопросом \"Second\", ответом \"Answer\", позицией \"2" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.And("В базу данных добавлена статья с вопросом \"Third\", ответом \"Answer\", позицией \"3\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.When("Администратор обновляет статью с корректными данными", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
    testRunner.Then("Статья успешно обновлена", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
    testRunner.When("Администратор обновляет статью с некорректным идентификатором", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
    testRunner.Then("Получено сообщение об ошибке NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
    testRunner.When("Администратор обновляет статью устанавливая идентификатор несуществующего родител" +
                        "я", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
    testRunner.Then("Получено сообщение об ошибке NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
    testRunner.When("Администратор обновляет статью устанавливая родителем корневую категорию", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
    testRunner.Then("Получено сообщение об ошибке BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Администратор отправляет поисковый запрос")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "Администратор отправляет поисковый запрос")]
        [Xunit.InlineDataAttribute("Answer", "1", "4", "4", new string[0])]
        [Xunit.InlineDataAttribute("Answer", "2", "4", "3", new string[0])]
        [Xunit.InlineDataAttribute("Answer", "3", "4", "0", new string[0])]
        [Xunit.InlineDataAttribute("First", "1", "10", "1", new string[0])]
        public void АдминистраторОтправляетПоисковыйЗапрос(string searchQuery, string page, string pageSize, string count, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SearchQuery", searchQuery);
            argumentsOfScenario.Add("Page", page);
            argumentsOfScenario.Add("PageSize", pageSize);
            argumentsOfScenario.Add("Count", count);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор отправляет поисковый запрос", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 59
 testRunner.Given("В базу данных добавлена статья с вопросом \"First\", ответом \"Answer\", позицией \"1\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
 testRunner.And("В базу данных добавлена статья с вопросом \"Second\", ответом \"Answer\", позицией \"2" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("В базу данных добавлена статья с вопросом \"Third\", ответом \"Answer\", позицией \"3\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("В базу данных добавлена статья с вопросом \"Fourth\", ответом \"Answer\", позицией \"4" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And("В базу данных добавлена статья с вопросом \"Fifth\", ответом \"Answer\", позицией \"5\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("В базу данных добавлена статья с вопросом \"Sixth\", ответом \"Answer\", позицией \"6\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And("В базу данных добавлена статья с вопросом \"Seventh\", ответом \"Answer\", позицией \"" +
                        "7\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.When(string.Format("Администратор запрашивает статьи по слову {0} на странице {1} с размером страницы" +
                            " {2}", searchQuery, page, pageSize), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then(string.Format("Администратор получает статьи в количестве {0}", count), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Администратор отправляет неверный поисковый запрос")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "Администратор отправляет неверный поисковый запрос")]
        public void АдминистраторОтправляетНеверныйПоисковыйЗапрос()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор отправляет неверный поисковый запрос", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 76
 testRunner.When("Администратор запрашивает статьи по запросу \"\" на странице 1 с размером страницы " +
                        "10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.Then("Получено сообщение об ошибке BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Администратор устанавливает вопросу тэги")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "Администратор устанавливает вопросу тэги")]
        public void АдминистраторУстанавливаетВопросуТэги()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор устанавливает вопросу тэги", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 80
 testRunner.Given("В базу данных добавлена статья с вопросом \"First\", ответом \"Answer\", позицией \"1\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 81
 testRunner.And("В базу данных добавлена статья с вопросом \"Second\", ответом \"Answer\", позицией \"2" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
 testRunner.And("В базу данных добавлена статья с вопросом \"Third\", ответом \"Answer\", позицией \"3\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.And("В базу данных добавлены тэг с названием \"First tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.And("В базу данных добавлены тэг с названием \"Second tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.And("В базу данных добавлены тэг с названием \"Third tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And("В базу данных добавлены тэг с названием \"Fourth tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("В базу данных добавлены тэг с названием \"Fifth tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("В базу данных добавлены тэг с названием \"Sixth tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("В базу данных добавлены тэг с названием \"Седьмой тэг\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
   testRunner.When("Администратор устанавливает тэги с некорректными идентификаторами", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
   testRunner.Then("Получено сообщение об ошибке BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
   testRunner.When("Администратор устанавливает тэги с названиями \"First tag, Second tag, Third tag, " +
                        "Седьмой тэг\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
   testRunner.Then("Получено сообщение об ошибке BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
   testRunner.When("Администратор устанавливает тэги с названиями \"First tag, Second tag, Седьмой тэг" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
   testRunner.Then("Тэги с названиями \"First tag, Second tag, Седьмой тэг\" успешно добавлены вопросу", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
   testRunner.When("Администратор запрашивает статьи по запросу \"тэг\" на странице 1 с размером страни" +
                        "цы 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
   testRunner.Then("Администратор получает пагинированный ответ со статьей в количестве 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="После добавления статьи с позицией выполняется выравнивание статей")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "После добавления статьи с позицией выполняется выравнивание статей")]
        public void ПослеДобавленияСтатьиСПозициейВыполняетсяВыравниваниеСтатей()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("После добавления статьи с позицией выполняется выравнивание статей", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 100
 testRunner.Given("В базу данных добавлена корневая категория с именем \"First\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
 testRunner.And("В базу данных добавлена корневая категория с именем \"Second\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.And("В базу данных добавлена дочерняя категория с именем \"Third\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And("В базу данных добавлена дочерняя категория с именем \"Fourth\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.When("Администратор добавляет новую статью с вопросом \"Первый\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"100\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
 testRunner.And("Администратор добавляет новую статью с вопросом \"Второй\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.And("Администратор добавляет новую статью с вопросом \"Третий\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
 testRunner.And("Администратор запрашивает список отсортированных статей для категории с именем \"T" +
                        "hird\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.Then("Получен список статей для категории с именем \"Third\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
 testRunner.And("Статьи отсортированы по позиции", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="После удаления статьи с позицией выполняется выравнивание статей")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "После удаления статьи с позицией выполняется выравнивание статей")]
        public void ПослеУдаленияСтатьиСПозициейВыполняетсяВыравниваниеСтатей()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("После удаления статьи с позицией выполняется выравнивание статей", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 112
 testRunner.When("Администратор добавляет новую статью с вопросом \"Первый\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"100\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
 testRunner.And("Администратор добавляет новую статью с вопросом \"Второй\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.And("Администратор добавляет новую статью с вопросом \"Третий\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.And("Администратор добавляет новую статью с вопросом \"Четвертый\" ответом \"Ответ\" в кат" +
                        "егорию с именем \"Third\" и позицией \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.And("Администратор удаляет статью с вопросом \"Четвертый\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
 testRunner.And("Администратор запрашивает список отсортированных статей для категории с именем \"T" +
                        "hird\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.Then("Получен список статей для категории с именем \"Third\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
 testRunner.And("Статьи отсортированы по позиции", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="После изменения позиции статьи в той же категории выполняется выравнивание статей" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "После изменения позиции статьи в той же категории выполняется выравнивание статей" +
            "")]
        public void ПослеИзмененияПозицииСтатьиВТойЖеКатегорииВыполняетсяВыравниваниеСтатей()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("После изменения позиции статьи в той же категории выполняется выравнивание статей" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 122
 testRunner.When("Администратор добавляет новую статью с вопросом \"Первый\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"100\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 123
 testRunner.And("Администратор добавляет новую статью с вопросом \"Второй\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
 testRunner.And("Администратор добавляет новую статью с вопросом \"Третий\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.And("Администратор добавляет новую статью с вопросом \"Четвертый\" ответом \"Ответ\" в кат" +
                        "егорию с именем \"Third\" и позицией \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.And("Администратор добавляет новую статью с вопросом \"Пятый\" ответом \"Ответ\" в категор" +
                        "ию с именем \"Third\" и позицией \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.And("Администратор добавляет новую статью с вопросом \"Шестой\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.And("Администратор добавляет новую статью с вопросом \"Седьмой\" ответом \"Ответ\" в катег" +
                        "орию с именем \"Third\" и позицией \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
 testRunner.And("Администратор обновляет статью с вопросом \"Второй\" устанавливая вопрос \"Второй\" о" +
                        "твет \"Ответ\" родителя с именем \"Third\" и позицию \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
 testRunner.Then("Статья успешно обновлена", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
 testRunner.When("Администратор запрашивает список отсортированных статей для категории с именем \"T" +
                        "hird\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 132
 testRunner.Then("Получен список статей для категории с именем \"Third\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
 testRunner.And("Статьи отсортированы по позиции", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="После перемещения статьи с позицией в другую категорию выполняется выравнивание с" +
            "татей в прежней и новой категориях")]
        [Xunit.TraitAttribute("FeatureTitle", "Admin_could_make_CRUD_and_Search_operations_with_articles")]
        [Xunit.TraitAttribute("Description", "После перемещения статьи с позицией в другую категорию выполняется выравнивание с" +
            "татей в прежней и новой категориях")]
        public void ПослеПеремещенияСтатьиСПозициейВДругуюКатегориюВыполняетсяВыравниваниеСтатейВПрежнейИНовойКатегориях()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("После перемещения статьи с позицией в другую категорию выполняется выравнивание с" +
                    "татей в прежней и новой категориях", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 136
 testRunner.When("Администратор добавляет новую статью с вопросом \"Первый\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"100\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 137
 testRunner.And("Администратор добавляет новую статью с вопросом \"Второй\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
 testRunner.And("Администратор добавляет новую статью с вопросом \"Третий\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
 testRunner.When("Администратор добавляет новую статью с вопросом \"Четвертый\" ответом \"Ответ\" в кат" +
                        "егорию с именем \"Third\" и позицией \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
 testRunner.When("Администратор добавляет новую статью с вопросом \"Пятый\" ответом \"Ответ\" в категор" +
                        "ию с именем \"Third\" и позицией \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
 testRunner.And("Администратор добавляет новую статью с вопросом \"Шестой\" ответом \"Ответ\" в катего" +
                        "рию с именем \"Third\" и позицией \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.And("Администратор добавляет новую статью с вопросом \"Седьмой\" ответом \"Ответ\" в катег" +
                        "орию с именем \"Third\" и позицией \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.When("Администратор обновляет статью с вопросом \"Второй\" устанавливая вопрос \"Второй\" о" +
                        "твет \"Ответ\" родителя с именем \"Fourth\" и позицию \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
 testRunner.Then("Статья успешно обновлена", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
 testRunner.When("Администратор обновляет статью с вопросом \"Первый\" устанавливая вопрос \"Первый\" о" +
                        "твет \"Ответ\" родителя с именем \"Fourth\" и позицию \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
 testRunner.Then("Статья успешно обновлена", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
 testRunner.When("Администратор запрашивает список отсортированных статей для категории с именем \"T" +
                        "hird\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 148
 testRunner.Then("Получен список статей для категории с именем \"Third\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 149
 testRunner.And("Статьи отсортированы по позиции", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
 testRunner.When("Администратор запрашивает список отсортированных статей для категории с именем \"F" +
                        "ourth\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 151
 testRunner.Then("Получен список статей для категории с именем \"Fourth\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
 testRunner.And("Статьи отсортированы по позиции", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Admin_Could_Make_CRUD_And_Search_Operations_With_ArticlesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Admin_Could_Make_CRUD_And_Search_Operations_With_ArticlesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
