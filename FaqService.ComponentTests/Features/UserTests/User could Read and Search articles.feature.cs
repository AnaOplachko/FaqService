// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FaqService.ComponentTests.Features.UserTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class User_Could_Read_And_Search_ArticlesFeature : object, Xunit.IClassFixture<User_Could_Read_And_Search_ArticlesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "User could Read and Search articles.feature"
#line hidden
        
        public User_Could_Read_And_Search_ArticlesFeature(User_Could_Read_And_Search_ArticlesFeature.FixtureData fixtureData, FaqService_ComponentTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-EN"), "Features/UserTests", "User_could_Read_And_Search_articles", "\tКак пользователь \n\tЯ хочу получать информацию о статьях а так же осуществлять по" +
                    "иск по ключевому слову", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
 #line hidden
#line 5
  testRunner.Given("В базу данных добавлена корневая категория с именем \"First\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
  testRunner.And("В базу данных добавлена корневая категория с именем \"Second\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
  testRunner.And("В базу данных добавлена дочерняя категория с именем \"Third\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
  testRunner.And("В базу данных добавлена дочерняя категория с именем \"Fourth\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Пользователь получает сообщение об ошибке если список всех статей пуст")]
        [Xunit.TraitAttribute("FeatureTitle", "User_could_Read_And_Search_articles")]
        [Xunit.TraitAttribute("Description", "Пользователь получает сообщение об ошибке если список всех статей пуст")]
        public void ПользовательПолучаетСообщениеОбОшибкеЕслиСписокВсехСтатейПуст()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Пользователь получает сообщение об ошибке если список всех статей пуст", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 11
 testRunner.When("Пользователь запрашивает все статьи", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then("Получено сообщение об ошибке NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Пользователь получает список всех статей")]
        [Xunit.TraitAttribute("FeatureTitle", "User_could_Read_And_Search_articles")]
        [Xunit.TraitAttribute("Description", "Пользователь получает список всех статей")]
        public void ПользовательПолучаетСписокВсехСтатей()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Пользователь получает список всех статей", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 15
 testRunner.Given("В базу данных добавлена статья с вопросом \"First\", ответом \"Answer\", позицией \"1\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
 testRunner.And("В базу данных добавлена статья с вопросом \"Second\", ответом \"Answer\", позицией \"2" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And("В базу данных добавлена статья с вопросом \"Third\", ответом \"Answer\", позицией \"3\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.When("Пользователь запрашивает все статьи", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then("Пользователь получает все статьи", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Пользователь получает статью по идентификатору")]
        [Xunit.TraitAttribute("FeatureTitle", "User_could_Read_And_Search_articles")]
        [Xunit.TraitAttribute("Description", "Пользователь получает статью по идентификатору")]
        public void ПользовательПолучаетСтатьюПоИдентификатору()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Пользователь получает статью по идентификатору", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 22
 testRunner.Given("В базу данных добавлена статья с вопросом \"First\", ответом \"Answer\", позицией \"1\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.And("В базу данных добавлена статья с вопросом \"Second\", ответом \"Answer\", позицией \"2" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("В базу данных добавлена статья с вопросом \"Third\", ответом \"Answer\", позицией \"3\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.When("Пользователь запрашивает статью по идентификатору", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("Пользователь успешно получает статью с идентификатором", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.When("Пользователь запрашивает статью с некорректным идентификатором", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then("Получено сообщение об ошибке NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Пользователь отправляет поисковый запрос")]
        [Xunit.TraitAttribute("FeatureTitle", "User_could_Read_And_Search_articles")]
        [Xunit.TraitAttribute("Description", "Пользователь отправляет поисковый запрос")]
        [Xunit.InlineDataAttribute("Answer", "1", "4", "4", new string[0])]
        [Xunit.InlineDataAttribute("Answer", "2", "4", "3", new string[0])]
        [Xunit.InlineDataAttribute("Answer", "3", "4", "0", new string[0])]
        [Xunit.InlineDataAttribute("First", "1", "10", "2", new string[0])]
        [Xunit.InlineDataAttribute("тэг", "1", "10", "1", new string[0])]
        public void ПользовательОтправляетПоисковыйЗапрос(string searchQuery, string page, string pageSize, string count, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SearchQuery", searchQuery);
            argumentsOfScenario.Add("Page", page);
            argumentsOfScenario.Add("PageSize", pageSize);
            argumentsOfScenario.Add("Count", count);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Пользователь отправляет поисковый запрос", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 31
 testRunner.Given("В базу данных добавлена статья с вопросом \"First\", ответом \"Answer\", позицией \"1\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.And("В базу данных добавлена статья с вопросом \"Second\", ответом \"Answer\", позицией \"2" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And("В базу данных добавлена статья с вопросом \"Third\", ответом \"Answer\", позицией \"3\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And("В базу данных добавлена статья с вопросом \"Fourth\", ответом \"Answer\", позицией \"4" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("В базу данных добавлена статья с вопросом \"Fifth\", ответом \"Answer\", позицией \"5\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And("В базу данных добавлена статья с вопросом \"Sixth\", ответом \"Answer\", позицией \"6\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And("В базу данных добавлена статья с вопросом \"Seventh\", ответом \"Answer\", позицией \"" +
                        "7\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("В базу данных добавлены тэг с названием \"First tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("В базу данных добавлены тэг с названием \"Second tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.And("В базу данных добавлены тэг с названием \"Third tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("В базу данных добавлены тэг с названием \"Fourth tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("В базу данных добавлены тэг с названием \"Fifth tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("В базу данных добавлены тэг с названием \"Sixth tag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("В базу данных добавлены тэг с названием \"Седьмой тэг\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.When("Администратор устанавливает тэги с названиями \"First tag, Second tag, Седьмой тэг" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.And(string.Format("Пользователь запрашивает статьи по слову {0} на странице {1} с размером страницы " +
                            "{2}", searchQuery, page, pageSize), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Then(string.Format("Пользователь получает статьи в количестве {0}", count), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Пользователь отправляет пустой поисковый запрос")]
        [Xunit.TraitAttribute("FeatureTitle", "User_could_Read_And_Search_articles")]
        [Xunit.TraitAttribute("Description", "Пользователь отправляет пустой поисковый запрос")]
        public void ПользовательОтправляетПустойПоисковыйЗапрос()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Пользователь отправляет пустой поисковый запрос", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 57
 testRunner.When("Пользователь запрашивает статьи по запросу \"\" на странице \"1\" с размером страницы" +
                        " \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.Then("Получено сообщение об ошибке BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                User_Could_Read_And_Search_ArticlesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                User_Could_Read_And_Search_ArticlesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
